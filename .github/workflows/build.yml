name: Build Kernel

on:
  workflow_dispatch:

jobs:
  build:
    name: Build Kernel
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'
        
    - name: Setup environment
      run: |
        sudo apt update
        sudo apt upgrade -y
        sudo apt install -y git-core gnupg flex bison build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 libncurses5 lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig libx11-dev libreadline-dev libgl1-mesa-dev g++-multilib git flex bison gperf build-essential libncurses-dev tofrodos libxml2-utils xsltproc zlib1g-dev dpkg-dev libsdl1.2-dev gnupg flex bison gperf build-essential zip curl zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 lib32ncurses5-dev x11proto-core-dev libx11-dev libgl1-mesa-dev libxml2-utils xsltproc unzip m4 lib32z1-dev ccache libssl-dev python2.7 zstd libarchive-tools bc
        sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 500
        git submodule update --init --recursive

    - name: Download Neutron-clang
      run: |
        mkdir neutron-clang
        cd neutron-clang
        bash <(curl -s "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman") -S
        bash <(curl -s "https://raw.githubusercontent.com/Neutron-Toolchains/antman/main/antman") --patch=glibc
        cd ..
        
    - name: Integrate Re:Kernel
      run: |
        wget https://github.com/Sakion-Team/Re-Kernel/releases/download/modifier/Kernel-Modifier-v2-X.jar
        java -version
        java -jar Kernel-Modifier-v2-X.jar

    - name: Config
      run: make ARCH=arm64 SUBARCH=arm64 O=out vendor/alioth_defconfig

    - name: Build
      run: PATH="$GITHUB_WORKSPACE/neutron-clang/bin:${PATH}" make -j$(nproc) ARCH=arm64 SUBARCH=arm64 O=out CC="clang" CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_COMPAT=arm-linux-gnueabi- LLVM=1 LLVM_IAS=1

    - name: Pack AnyKernel
      run: |
        cp out/arch/arm64/boot/Image.gz out/arch/arm64/boot/dtbo.img out/arch/arm64/boot/dtb.img ./AnyKernel/
        cd AnyKernel 
        mv dtb.img dtb
        zip -r N0Kernel.zip ./*

    - name: Create release
      run: echo "release_name=$(date +'%Y%m%d.%H%M')" >> $GITHUB_ENV

    - uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          tag_name: ${{ env.release_name }}
          release_name: Release ${{ env.release_name }}
          draft: false
          prerelease: false

    - name: Upload Kernel
      uses: actions/upload-release-asset@v1
      id: upload-kernel
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{github.workspace}}/AnyKernel/N0Kernel.zip
        asset_name: N0Kernel.zip
        asset_content_type: application/zip
